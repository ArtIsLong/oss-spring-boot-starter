/** * $Id: DefaultSftpProgressMonitor.java,v 1.0 2022/2/12 5:11 PM chenmin Exp $ */package io.github.artislong.core.sftp;import com.jcraft.jsch.SftpProgressMonitor;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import lombok.extern.slf4j.Slf4j;import java.text.NumberFormat;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;/** * @author 陈敏 * @version $Id: DefaultSftpProgressMonitor.java,v 1.1 2022/2/12 5:11 PM chenmin Exp $ * Created on 2022/2/12 5:11 PM * My blog： https://www.chenmin.info */@Data@Slf4j@AllArgsConstructor@NoArgsConstructorpublic class DefaultSftpProgressMonitor implements SftpProgressMonitor, Runnable {    private long maxFileSize = 0L;    private long startTime = 0L;    private long upLoaded = 0L;    private boolean isScheduled = false;    private ScheduledExecutorService executorService;    public DefaultSftpProgressMonitor(long maxFileSize) {        this.maxFileSize = maxFileSize;    }    @Override    public void run() {        NumberFormat format = NumberFormat.getPercentInstance();        format.setMaximumFractionDigits(2);        format.setMinimumFractionDigits(2);        String value = format.format((upLoaded / (double) maxFileSize));        if (log.isDebugEnabled()) {            log.debug("已传输:{}KB,传输进度:{}", upLoaded/1024, value);        }        if (upLoaded == maxFileSize) {            destoryThread();            long endTime = System.currentTimeMillis();            if (log.isDebugEnabled()) {                log.debug("传输完成!用时:{}s", (endTime - startTime)/1000);            }        }    }    @Override    public void init(int op, String src, String dest, long max) {        if (log.isDebugEnabled()) {            log.debug("开始传输文件:{},文件总大小为:{}KB", src, maxFileSize/1024);        }        startTime = System.currentTimeMillis();    }    @Override    public boolean count(long count) {        if (!isScheduled) {            createThread();        }        upLoaded += count;        if (count > 0) {            return true;        }        return false;    }    @Override    public void end() {    }    /**     * 创建线程,定时输出上传进度     */    public void createThread() {        executorService = Executors.newSingleThreadScheduledExecutor();        executorService.scheduleWithFixedDelay(this, 1, 2, TimeUnit.SECONDS);        isScheduled = true;    }    public void destoryThread() {        boolean isShutdown = executorService.isShutdown();        if (!isShutdown) {            executorService.shutdown();        }    }}